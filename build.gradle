import org.hidetake.gradle.swagger.generator.GenerateSwaggerUI

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.1'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'org.sonarqube' version '4.4.1.3373'
    id 'com.epages.restdocs-api-spec' version '0.19.2'
    id 'org.hidetake.swagger.generator' version '2.19.2'
    id 'jacoco'
}

group = 'gdsc.konkuk'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security:2.3.3.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.3'

    // Database
    runtimeOnly 'com.h2database:h2:2.2.224'
    implementation 'com.oracle.database.security:oraclepki:21.1.0.0'
    implementation 'com.oracle.database.security:osdt_core:21.1.0.0'
    implementation 'com.oracle.database.security:osdt_cert:21.1.0.0'
    implementation 'com.oracle.database.jdbc:ojdbc11:21.9.0.0'
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.1'
	implementation 'com.google.crypto.tink:tink:1.18.0'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation "com.epages:restdocs-api-spec:0.19.2"
    testImplementation "com.epages:restdocs-api-spec-mockmvc:0.19.2"
    testImplementation 'org.springframework.security:spring-security-test:6.3.1'

    // Swagger UI
    swaggerUI 'org.webjars:swagger-ui:5.0.0'

    // Dev Tools
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
}

jar {
    enabled = false
}

bootJar {
    dependsOn 'copySwaggerUI'
    doFirst {
        if (project.hasProperty('excludeSecrets') && project.property('excludeSecrets') == 'true') {
            exclude 'application.yaml'
            println 'Excluding application.yaml from the build'
        }
    }
}

resolveMainClassName {
    dependsOn 'copySwaggerUI'
}

test {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

jacoco {
    toolVersion = '0.8.7'
}

jacocoTestReport {
    dependsOn 'copySwaggerUI'
    reports {
        html.required = true
        xml.required = true
    }
}

sonar {
    properties {
        property 'sonar.projectKey', 'gdsc-konkuk_platform-core'
        property 'sonar.organization', 'gdsc-konkuk'
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.coverage.jacoco.xmlReportPaths', layout.buildDirectory.file("reports/jacoco/test/jacocoTestReport.xml")
    }
}

openapi3 {
    servers = [
            { url = 'https://api.gdsc-konkuk.dev' },
            { url = 'https://stage.gdsc-konkuk.dev' },
            { url = 'https://api.gdgoc-konkuk.com' },
            { url = 'https://stage.gdgoc-konkuk.com' },
            { url = 'http://localhost:8080' },
    ]
    title = 'Post Service API'
    description = 'Post Service API description'
    version = '1.0.0'
    format = 'yaml'
}

postman {
    baseUrl = 'http://localhost:8080'
}

swaggerSources {
    sample {
        inputFile = file(layout.buildDirectory.file("api-spec/openapi3.yaml"))
    }
}

tasks.withType(GenerateSwaggerUI).configureEach {
    dependsOn 'openapi3'
}

tasks.register('copySwaggerUI', Copy) {
    dependsOn 'generateSwaggerUISample'
    from(tasks.named('generateSwaggerUISample', GenerateSwaggerUI).map { it.outputDir })
    into(layout.buildDirectory.dir("resources/main/static/docs"))
}
