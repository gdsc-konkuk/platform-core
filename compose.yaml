services:
  spring:
  # If the organization name is changed, update the following to ghcr.io/{new_organization_name}/platform-core.
    image: ghcr.io/gdgoc-konkuk/platform-core:latest
    volumes:
      - ${ORACLE_WALLET_PATH:-/tmp/wallet}:/app/wallet
    container_name: spring
    restart: always
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "5"
        tag: "{{.Name}}"
    networks:
      - frontend
      - backend
    environment:
      ORACLE_URL: ${ORACLE_URL}
      ORACLE_USERNAME: ${ORACLE_USERNAME}
      ORACLE_PASSWORD: ${ORACLE_PASSWORD}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GMAIL_USERNAME: ${GMAIL_USERNAME}
      GMAIL_APP_PASSWORD: ${GMAIL_APP_PASSWORD}
      DISCORD_WEBHOOK_URL: ${DISCORD_WEBHOOK_URL}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION}
      ADMIN_DOMAIN: ${ADMIN_DOMAIN}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      TZ: Asia/Seoul
    healthcheck:
      test: curl --fail --silent --show-error http://spring:8080/actuator/health || exit 1
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 3m
      start_interval: 5s

  nginx:
    image: nginx:latest
    container_name: nginx
    restart: always
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "5"
        tag: "{{.Name}}"
    ports:
      - "0.0.0.0:80:80/tcp"
      - "0.0.0.0:443:443/tcp"
    networks:
      - frontend
    depends_on:
      spring:
        condition: service_healthy
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certbot/data/:/var/www/certbot:ro
      - ./certbot/conf/:/etc/letsencrypt/:ro
    environment:
      TZ: Asia/Seoul
    healthcheck:
      test: curl --fail --silent --show-error http://nginx/health || exit 1
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 3m
      start_interval: 5s

  certbot:
    image: certbot/certbot:latest
    container_name: certbot
    restart: always
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "5"
        tag: "{{.Name}}"
    depends_on:
      nginx:
        condition: service_healthy
    volumes:
      - ./certbot/data:/var/www/certbot:rw
      - ./certbot/conf:/etc/letsencrypt/:rw
    # If your nginx server has not yet been issued an SSL certificate,
    # First, make test file in ./certbot/data/.well-known/acme-challenge/
    # example: echo "test" > ./certbot/data/.well-known/acme-challenge/test
    # Second, run the command below
    # docker compose run --rm --entrypoint "" certbot certbot certonly --webroot --webroot-path /var/www/certbot -d {your_domain} --email {your_email} --agree-tos --non-interactive
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12d & wait $${!}; done;'"

  autoheal:
    image: willfarrell/autoheal:latest
    container_name: autoheal
    restart: always
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "5"
        tag: "{{.Name}}"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      AUTOHEAL_CONTAINER_LABEL: all
      AUTOHEAL_INTERVAL: 30

volumes:
  mysql-data:

networks:
  frontend:
  backend:
    internal: true
